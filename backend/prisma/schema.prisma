// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  password      String
  profilePicture String?
  bio           String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  stories       Story[]
  comments      Comment[]
  ratings       Rating[]
  bookmarks     Bookmark[]
  storyViews    StoryView[]
  followers     Follow[] @relation("Followers")
  following     Follow[] @relation("Following")
  readingHistory ReadingHistory[]
  preferences   UserPreference?
  drafts        Draft[]

  @@map("users")
}

// Story model
model Story {
  id          String    @id @default(uuid())
  title       String
  description String
  coverImage  String?
  status      StoryStatus @default(DRAFT)
  viewCount   Int       @default(0)
  uniqueViewCount Int    @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  comments    Comment[]
  ratings     Rating[]
  bookmarks   Bookmark[]
  views       StoryView[]
  readingHistory ReadingHistory[]
  categories  CategoryOnStory[]
  drafts      Draft[]

  @@map("stories")
}

// Category model
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  stories     CategoryOnStory[]

  @@map("categories")
}

// Junction table for many-to-many relation between Story and Category
model CategoryOnStory {
  storyId     String
  categoryId  String
  assignedAt  DateTime  @default(now())

  // Relations
  story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([storyId, categoryId])
  @@map("category_story")
}

// Chapter model
model Chapter {
  id            String    @id @default(uuid())
  title         String
  content       String    @db.Text
  chapterNumber Int
  wordCount     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  storyId       String
  story         Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  comments      Comment[]
  readingHistory ReadingHistory[]
  bookmarks     Bookmark[]

  @@map("chapters")
}

// Comment model
model Comment {
  id            String    @id @default(uuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId       String?
  story         Story?    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterId     String?
  chapter       Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  parentId      String?
  parent        Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentToComment")

  @@map("comments")
}

// Rating model
model Rating {
  id        String    @id @default(uuid())
  rating    Int       @db.SmallInt
  createdAt DateTime  @default(now())

  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId   String
  story     Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@map("ratings")
}

// Bookmark model
model Bookmark {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId   String
  story     Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterId String?
  chapter   Chapter?  @relation(fields: [chapterId], references: [id], onDelete: SetNull)

  @@unique([userId, storyId])
  @@map("bookmarks")
}

// StoryView model for tracking views
model StoryView {
  id        String    @id @default(uuid())
  ip        String?
  userAgent String?
  viewedAt  DateTime  @default(now())
  
  // Relations
  storyId   String
  story     Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("story_views")
}

// Follow model for user following system
model Follow {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  
  // Relations
  followerId  String    // User who is following
  follower    User      @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String    // User who is being followed
  following   User      @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  
  // Ensure a user can't follow another user more than once
  @@unique([followerId, followingId])
  @@map("follows")
}

// ReadingHistory model for tracking user reading activity
model ReadingHistory {
  id            String    @id @default(uuid())
  firstReadAt   DateTime  @default(now())
  lastReadAt    DateTime  @default(now()) @updatedAt
  progress      Int       @default(0)     // Progress in percentage (0-100)
  currentChapterNumber Int? // Current chapter the user is reading
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyId       String
  story         Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  chapterId     String?
  chapter       Chapter?  @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  
  // Ensure a user can't have duplicate reading history entries for the same story
  @@unique([userId, storyId])
  @@map("reading_history")
}

// UserPreference model for storing user preferences
model UserPreference {
  id            String    @id @default(uuid())
  fontFamily    String    @default("Arial")  // Times New Roman, Roboto, or Arial
  fontSize      Int       @default(16)      // Font size in pixels
  theme         String    @default("light") // light or dark
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  userId        String    @unique          // One-to-one relationship with User
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// Draft model for storing story and chapter drafts
model Draft {
  id            String    @id @default(uuid())
  title         String
  content       String    @db.Text
  type          DraftType // STORY or CHAPTER
  storyId       String?   // Only for chapter drafts
  chapterNumber Int?      // Only for chapter drafts
  coverImage    String?   // Only for story drafts
  description   String?   @db.Text // Only for story drafts
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  story         Story?    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  @@map("drafts")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum DraftType {
  STORY
  CHAPTER
}

enum StoryStatus {
  DRAFT
  PUBLISHED
  COMPLETED
}
